#!/usr/bin/env python

import os
import sys
import numpy as np
from scipy.io import netcdf_file

print()
print("Usage: ", os.path.basename(__file__), ' qsc_out.<extension>.nc index')
print("An input file qsc_in.<extension>_<index> will be generated for this single configuration")

if len(sys.argv) != 3:
   raise RuntimeError("A qsc_out.*.nc file must be provided as an argument")

filename = sys.argv[1]
bare_filename = os.path.basename(filename)
s = 'qsc_out.'
if bare_filename[:len(s)] != s or filename[-3:] != '.nc':
   raise RuntimeError("A qsc_out.*.nc file must be provided as an argument")

index = int(sys.argv[2])

f = netcdf_file(filename, 'r', mmap=False)
nfp = f.variables['nfp'][()]
try:
   nphi = f.variables['nphi'][()]
except:
   nphi = 301
p2 = f.variables['p2'][()]
I2 = f.variables['I2'][()]
iota = f.variables['scan_iota'][()]
try:
   axis_length = f.variables['scan_axis_length'][()]
except:
   axis_length = np.zeros_like(iota)
B20_variation = f.variables['scan_B20_variation'][()]
r_singularity = f.variables['scan_r_singularity'][()]
d2_volume_d_psi2 = f.variables['scan_d2_volume_d_psi2'][()]
DMerc_times_r2 = f.variables['scan_DMerc_times_r2'][()]
L_grad_B = f.variables['scan_min_L_grad_B'][()]
L_grad_grad_B = f.variables['scan_min_L_grad_grad_B'][()]
elongation = f.variables['scan_max_elongation'][()]
eta_bar = f.variables['scan_eta_bar'][()]
sigma0 = f.variables['scan_sigma0'][()]
B2c = f.variables['scan_B2c'][()]
B2s = f.variables['scan_B2s'][()]
R0c = f.variables['scan_R0c'][()]
R0s = f.variables['scan_R0s'][()]
Z0c = f.variables['scan_Z0c'][()]
Z0s = f.variables['scan_Z0s'][()]
weight_B20 = f.variables['scan_weight_B20'][()]
weight_grad_B = f.variables['scan_weight_grad_B'][()]
weight_grad_grad_B = f.variables['scan_weight_grad_grad_B'][()]
weight_axis_length = f.variables['scan_weight_axis_length'][()]
target_axis_length = f.variables['scan_target_axis_length'][()]
weight_iota = f.variables['scan_weight_iota'][()]
target_iota = f.variables['scan_target_iota'][()]
weight_d2_volume_d_psi2 = f.variables['scan_weight_d2_volume_d_psi2'][()]
max_d2_volume_d_psi2 = f.variables['scan_max_d2_volume_d_psi2'][()]
try:
   weight_DMerc_times_r2 = f.variables['scan_weight_DMerc_times_r2'][()]
   min_DMerc_times_r2 = f.variables['scan_min_DMerc_times_r2'][()]
except:
   weight_DMerc_times_r2 = np.zeros_like(iota)
   min_DMerc_times_r2 = np.zeros_like(iota)
weight_elongation = f.variables['scan_weight_elongation'][()]
f.close()

print('Scan index {}:'.format(index))
print('  iota:', iota[index])
print('  axis_length:', axis_length[index])
print('  max elongation:', elongation[index])
print('  r_singularity:', r_singularity[index])
print('  d^2 volume /d psi^2:', d2_volume_d_psi2[index])
print('  DMerc * r^2:', DMerc_times_r2[index])
print('  B20 variation:', B20_variation[index])
print('  L grad B:', L_grad_B[index])
print('  L grad grad B:', L_grad_grad_B[index])
print()
print('# ', os.path.abspath(filename), '  index =', index)
print('eta_bar =', eta_bar[index])
print('sigma0 =', sigma0[index])
print('B2c =', B2c[index])
print('B2s =', B2s[index])
nfourier = R0c.shape[1]
print('R0c = [', R0c[index, 0], end='')
for j in range(1, nfourier):
   print(', ', R0c[index, j], end='')
print(']')

print('R0s = [', R0s[index, 0], end='')
for j in range(1, nfourier):
   print(', ', R0s[index, j], end='')
print(']')

print('Z0c = [', Z0c[index, 0], end='')
for j in range(1, nfourier):
   print(', ', Z0c[index, j], end='')
print(']')

print('Z0s = [', Z0s[index, 0], end='')
for j in range(1, nfourier):
   print(', ', Z0s[index, j], end='')
print(']')

print('weight_B20:', weight_B20[index])
print('weight_grad_B:', weight_grad_B[index])
print('weight_grad_grad_B:', weight_grad_grad_B[index])
print('weight_axis_length:', weight_axis_length[index])
print('target_axis_length:', target_axis_length[index])
print('weight_iota:', weight_iota[index])
print('target_iota:', target_iota[index])
print('weight_d2_volume_d_psi2:', weight_d2_volume_d_psi2[index])
print('max_d2_volume_d_psi2:', max_d2_volume_d_psi2[index])
print('weight_DMerc_times_r2:', weight_DMerc_times_r2[index])
print('min_DMerc_times_r2:', min_DMerc_times_r2[index])
print('weight_elongation:', weight_elongation[index])

single_filename = os.path.abspath(os.path.dirname(filename)) + "/qsc_in" + bare_filename[7:-3] + "_" + str(index)
print("Writing input file for a single run:", single_filename)
f = open(single_filename, 'w')
f.write('# This input file generated by ' + os.path.abspath(__file__) + "\n")
f.write('general_option = "single"\n')
f.write('\n')
f.write('[qsc]\n')
f.write('nfp = ' + str(nfp) + '\n')
f.write('nphi = ' + str(nphi) + '\n')
f.write('eta_bar = ' + str(eta_bar[index]) + '\n')
f.write('sigma0 = ' + str(sigma0[index]) + '\n')
f.write('B2c = ' + str(B2c[index]) + '\n')
f.write('B2s = ' + str(B2s[index]) + '\n')
f.write('I2 = ' + str(I2) + '\n')
f.write('p2 = ' + str(p2) + '\n')
f.write('order_r_option = "r2.1"\n')

f.write(f'R0c = [{R0c[index, 0]}')
for j in range(1, nfourier):
   f.write(f', {R0c[index, j]}')
f.write(']\n')

f.write(f'R0s = [{R0s[index, 0]}')
for j in range(1, nfourier):
   f.write(f', {R0s[index, j]}')
f.write(']\n')

f.write(f'Z0c = [{Z0c[index, 0]}')
for j in range(1, nfourier):
   f.write(f', {Z0c[index, j]}')
f.write(']\n')

f.write(f'Z0s = [{Z0s[index, 0]}')
for j in range(1, nfourier):
   f.write(f', {Z0s[index, j]}')
f.write(']\n')

f.close()
